% BSD 3-Clause License (LICENSE.txt)
% Copyright (c) 2019, Joonas T. Holmi (jtholmi@gmail.com)
% All rights reserved.

function O_wit = new(Version),
    % 'README on WIT-tag formatting.txt'
    if nargin == 0 || isempty(Version) || Version == 7, % Default: latest known version
        O_wit = WITio.obj.wit('WITec Project', [ ...
            WITio.obj.wit('Version', int32(7)) ...
            WITio.obj.wit('SystemInformation', [WITio.obj.wit('LastApplicationSessionIDs', WITio.obj.wit()) WITio.obj.wit('ServiceID', '') WITio.obj.wit('LicenseID', '') WITio.obj.wit('SystemID', '') WITio.obj.wit('ApplicationVersions', WITio.obj.wit(['MATLAB ' version]))]) ...
            WITio.obj.wit('NextDataID', int32(1)) ...
            WITio.obj.wit('ShellExtensionInfo') ... % For thumbnail, add: WITio.obj.wit('ThumbnailPreviewBitmap', [WITio.obj.wit('SizeX', int32(128)) WITio.obj.wit('SizeY', int32(128)) WITio.obj.wit('BitsPerPixel', int32(24)) WITio.obj.wit('BitmapData', uint8(Data))]) % Data->Im (for reading): Im = permute(reshape(Data, [3 128 128]), [3 2 1]); Im = Im(:,:,end:-1:1); Im->Data (for writing): Data = ipermute(uint8(Im(:,:,end:-1:1)), [3 2 1]);
            WITio.obj.wit('Data', WITio.obj.wit('NumberOfData', int32(0))) ...
            WITio.obj.wit('Viewer', [WITio.obj.wit('ViewerClassName 0', 'TVProjectManagerForm') WITio.obj.wit('Viewer 0', [WITio.obj.wit('TVCustomForm') WITio.obj.wit('TVProjectManagerForm')]) WITio.obj.wit('NumberOfViewer', int32(1))]) ...
            ]);
        O_wit.Magic = 'WIT_PR06'; % Enforce the correct Magic string!
    elseif Version == 6,
        O_wit = WITio.obj.wit('WITec Project', [ ...
            WITio.obj.wit('Version', int32(6)) ...
            WITio.obj.wit('SystemInformation', [WITio.obj.wit('LastApplicationSessionIDs', WITio.obj.wit()) WITio.obj.wit('ServiceID', '') WITio.obj.wit('LicenseID', '') WITio.obj.wit('ApplicationVersions', WITio.obj.wit(['MATLAB ' version]))]) ...
            WITio.obj.wit('NextDataID', int32(1)) ...
            WITio.obj.wit('ShellExtensionInfo') ... % For thumbnail, add: WITio.obj.wit('ThumbnailPreviewBitmap', [WITio.obj.wit('SizeX', int32(128)) WITio.obj.wit('SizeY', int32(128)) WITio.obj.wit('BitsPerPixel', int32(24)) WITio.obj.wit('BitmapData', uint8(Data))]) % Data->Im (for reading): Im = permute(reshape(Data, [3 128 128]), [3 2 1]); Im = Im(:,:,end:-1:1); Im->Data (for writing): Data = ipermute(uint8(Im(:,:,end:-1:1)), [3 2 1]);
            WITio.obj.wit('Data', WITio.obj.wit('NumberOfData', int32(0))) ...
            WITio.obj.wit('Viewer', [WITio.obj.wit('ViewerClassName 0', 'TVProjectManagerForm') WITio.obj.wit('Viewer 0', [WITio.obj.wit('TVCustomForm') WITio.obj.wit('TVProjectManagerForm')]) WITio.obj.wit('NumberOfViewer', int32(1))]) ...
            ]);
        O_wit.Magic = 'WIT_PR06'; % Enforce the correct Magic string!
    elseif Version >= 0 && Version <= 5, % Legacy versions
        O_wit = WITio.obj.wit('WITec Project', [ ...
            WITio.obj.wit('Version', int32(Version)) ...
            WITio.obj.wit('SystemInformation', [WITio.obj.wit('LastApplicationSessionIDs', WITio.obj.wit()) WITio.obj.wit('ApplicationVersions', WITio.obj.wit(['MATLAB ' version]))]) ... % (NOT IN ALL LEGACY VERSIONS)
            WITio.obj.wit('NextDataID', int32(1)) ...
            WITio.obj.wit('ShellExtensionInfo') ... % (NOT IN ALL LEGACY VERSIONS) % For thumbnail, add: WITio.obj.wit('ThumbnailPreviewBitmap', [WITio.obj.wit('SizeX', int32(128)) WITio.obj.wit('SizeY', int32(128)) WITio.obj.wit('BitsPerPixel', int32(24)) WITio.obj.wit('BitmapData', uint8(Data))]) % Data->Im (for reading): Im = permute(reshape(Data, [3 128 128]), [3 2 1]); Im = Im(:,:,end:-1:1); Im->Data (for writing): Data = ipermute(uint8(Im(:,:,end:-1:1)), [3 2 1]);
            WITio.obj.wit('Data', WITio.obj.wit('NumberOfData', int32(0))) ...
            WITio.obj.wit('Viewer', [WITio.obj.wit('ViewerClassName 0', 'TVProjectManagerForm') WITio.obj.wit('Viewer 0', [WITio.obj.wit('TVCustomForm') WITio.obj.wit('TVProjectManagerForm')]) WITio.obj.wit('NumberOfViewer', int32(1))]) ...
            ]);
        O_wit.Magic = 'WIT_PRCT'; % Enforce the correct Magic string!
    else, error('Unimplemented Version (%d)!', Version); end
end
